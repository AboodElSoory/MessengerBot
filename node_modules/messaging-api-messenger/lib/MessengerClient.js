'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _axios = require('axios');var _axios2 = _interopRequireDefault(_axios);
var _invariant = require('invariant');var _invariant2 = _interopRequireDefault(_invariant);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

































class MessengerClient {






  constructor(accessToken) {_initialiseProps.call(this);
    this._accessToken = accessToken;
    this._http = _axios2.default.create({
      baseURL: 'https://graph.facebook.com/v2.8/',
      headers: { 'Content-Type': 'application/json' } });

  }



  /**
     * Get User Profile
     *
     * https://www.quora.com/How-connect-Facebook-user-id-to-sender-id-in-the-Facebook-messenger-platform
     * first_name, last_name, profile_pic, locale, timezone, gender
     */



  /**
         * Messenger Profile
         *
         * https://developers.facebook.com/docs/messenger-platform/messenger-profile
         */



























  /**
             * Get Started Button
             *
             * https://developers.facebook.com/docs/messenger-platform/messenger-profile/get-started-button
             */













  /**
                 * Persistent Menu
                 *
                 * https://developers.facebook.com/docs/messenger-platform/messenger-profile/persistent-menu
                 * TODO: support locale?
                 */




















  /**
                     * Greeting Text
                     *
                     * https://developers.facebook.com/docs/messenger-platform/messenger-profile/greeting-text
                     * TODO: support locale?
                     */
















  /**
                         * Domain Whitelist
                         *
                         * https://developers.facebook.com/docs/messenger-platform/messenger-profile/domain-whitelisting
                         */













  /**
                             * Account Linking URL
                             *
                             * https://developers.facebook.com/docs/messenger-platform/messenger-profile/account-linking-url
                             */











  /**
                                 * Payment Settings
                                 *
                                 * https://developers.facebook.com/docs/messenger-platform/messenger-profile/payment-settings
                                 */































  /**
                                     * Target Audience
                                     *
                                     * https://developers.facebook.com/docs/messenger-platform/messenger-profile/target-audience
                                     */





















  /**
                                         * Send API
                                         *
                                         * https://developers.facebook.com/docs/messenger-platform/send-api-reference
                                         */
















  /**
                                             * Content Types
                                             *
                                             * https://developers.facebook.com/docs/messenger-platform/send-api-reference/contenttypes
                                             */




















  // TODO: support formdata fileupload?
  // FIXME: prettier bug?











  // TODO: support formdata fileupload?











  // TODO: support formdata fileupload?











  // TODO: support formdata fileupload?











  /**
   * Templates
   *
   * https://developers.facebook.com/docs/messenger-platform/send-api-reference/templates
   */














  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/button-template











  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/generic-template











































  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/list-template













  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/receipt-template









  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-boardingpass-template









  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-checkin-template









  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-itinerary-template









  // https://developers.facebook.com/docs/messenger-platform/send-api-reference/airline-update-template









  /**
   * Quick Replies
   *
   * https://developers.facebook.com/docs/messenger-platform/send-api-reference/quick-replies
   */

































  /**
       * Typing
       *
       * https://developers.facebook.com/docs/messenger-platform/send-api-reference/sender-actions
       */





















  /**
           * Upload API
           *
           * https://developers.facebook.com/docs/messenger-platform/send-api-reference/attachment-upload/v2.8
           */}exports.default = MessengerClient;MessengerClient.factory = accessToken => new MessengerClient(accessToken);var _initialiseProps = function _initialiseProps() {this.getHTTPClient = () => this._http;this.getUserProfile = userId => this._http.get(`/${userId}?access_token=${this._accessToken}`);this.getMessengerProfile = fields => this._http.get(`/me/messenger_profile?fields=${fields.join(',')}&access_token=${this._accessToken}`);this.setMessengerProfile = profile => this._http.post(`/me/messenger_profile?access_token=${this._accessToken}`, profile);this.deleteMessengerProfile = fields => this._http.delete(`/me/messenger_profile?access_token=${this._accessToken}`, { data: { fields } });this.getGetStartedButton = () => this.getMessengerProfile(['get_started']);this.setGetStartedButton = payload => this.setMessengerProfile({ get_started: { payload } });this.deleteGetStartedButton = () => this.deleteMessengerProfile(['get_started']);this.getPersistentMenu = () => this.getMessengerProfile(['persistent_menu']);this.setPersistentMenu = (menuItems, { inputDisabled = false } = {}) => this.setMessengerProfile({ persistent_menu: [{ locale: 'default', composer_input_disabled: inputDisabled, call_to_actions: menuItems }] });this.deletePersistentMenu = () => this.deleteMessengerProfile(['persistent_menu']);this.getGreetingText = () => this.getMessengerProfile(['greeting']);this.setGreetingText = text => this.setMessengerProfile({ greeting: [{ locale: 'default', text }] });this.deleteGreetingText = () => this.deleteMessengerProfile(['greeting']);this.getDomainWhitelist = () => this.getMessengerProfile(['whitelisted_domains']);this.setDomainWhitelist = domains => this.setMessengerProfile({ whitelisted_domains: domains });this.deleteDomainWhitelist = () => this.deleteMessengerProfile(['whitelisted_domains']);this.getAccountLinkingURL = () => this.getMessengerProfile(['account_linking_url']);this.setAccountLinkingURL = url => this.setMessengerProfile({ account_linking_url: url });this.deleteAccountLinkingURL = () => this.deleteMessengerProfile(['account_linking_url']);this.getPaymentSettings = () => this.getMessengerProfile(['payment_settings']);this.setPaymentPrivacyPolicyURL = url => this.setMessengerProfile({ payment_settings: { privacy_url: url } });this.setPaymentPublicKey = key => this.setMessengerProfile({ payment_settings: { public_key: key } });this.setPaymentTestUsers = users => this.setMessengerProfile({ payment_settings: { test_users: users } });this.deletePaymentSettings = () => this.deleteMessengerProfile(['payment_settings']);this.getTargetAudience = () => this.getMessengerProfile(['target_audience']);this.setTargetAudience = (type, whitelist = [], blacklist = []) => this.setMessengerProfile({ target_audience: { audience_type: type, countries: { whitelist, blacklist } } });this.deleteTargetAudience = () => this.deleteMessengerProfile(['target_audience']);this.sendRawBody = body => this._http.post(`/me/messages?access_token=${this._accessToken}`, body);this.send = (recipientId, message, options) => this.sendRawBody(_extends({ recipient: { id: recipientId }, message }, options));this.sendAttachment = (recipientId, attachment, options) => this.send(recipientId, { attachment }, options);this.sendText = (recipientId, text, options) => this.send(recipientId, { text }, options);this.sendIssueResolutionText = (recipientId, text) => this.sendText(recipientId, text, { tag: 'ISSUE_RESOLUTION' });this.sendAudio = (recipientId, url) => this.sendAttachment(recipientId, { type: 'audio', // eslint-disable-line
    payload: { url } });this.sendImage = (recipientId, url) => this.sendAttachment(recipientId, { type: 'image', payload: { url } });this.sendVideo = (recipientId, url) => this.sendAttachment(recipientId, { type: 'video', payload: { url } });this.sendFile = (recipientId, url) => this.sendAttachment(recipientId, { type: 'file', payload: { url } });this.sendTemplate = (recipientId, payload, options) => this.sendAttachment(recipientId, { type: 'template', payload }, options);this.sendButtonTemplate = (recipientId, text, buttons) => this.sendTemplate(recipientId, { template_type: 'button', text, buttons });this.sendGenericTemplate = (recipientId, elements, ratio = 'horizontal', options) => this.sendTemplate(recipientId, { template_type: 'generic', elements, image_aspect_ratio: ratio }, options);this.sendShippingUpdateTemplate = (recipientId, elements, ratio = 'horizontal') => this.sendGenericTemplate(recipientId, elements, ratio, { tag: 'SHIPPING_UPDATE' });this.sendReservationUpdateTemplate = (recipientId, elements, ratio = 'horizontal') => this.sendGenericTemplate(recipientId, elements, ratio, { tag: 'RESERVATION_UPDATE' });this.sendIssueResolutionTemplate = (recipientId, elements, ratio = 'horizontal') => this.sendGenericTemplate(recipientId, elements, ratio, { tag: 'ISSUE_RESOLUTION' });this.sendListTemplate = (recipientId, elements, buttons, topElementStyle = 'large') => this.sendTemplate(recipientId, { template_type: 'list', elements, buttons, top_element_style: topElementStyle });this.sendReceiptTemplate = (recipientId, attrs) => this.sendTemplate(recipientId, _extends({ template_type: 'receipt' }, attrs));this.sendAirlineBoardingPassTemplate = (recipientId, attrs) => this.sendTemplate(recipientId, _extends({ template_type: 'airline_boardingpass' }, attrs));this.sendAirlineCheckinTemplate = (recipientId, attrs) => this.sendTemplate(recipientId, _extends({ template_type: 'airline_checkin' }, attrs));this.sendAirlineItineraryTemplate = (recipientId, attrs) => this.sendTemplate(recipientId, _extends({ template_type: 'airline_itinerary' }, attrs));this.sendAirlineFlightUpdateTemplate = (recipientId, attrs) => this.sendTemplate(recipientId, _extends({ template_type: 'airline_update' }, attrs));this.sendQuickReplies = (recipientId, textOrAttachment, quickReplies) => {// quick_replies is limited to 11
    (0, _invariant2.default)(Array.isArray(quickReplies) && quickReplies.length <= 11, 'quickReplies is an array and limited to 11');quickReplies.forEach(quickReply => {if (quickReplies.content_type === 'text') {// title has a 20 character limit, after that it gets truncated
        (0, _invariant2.default)(quickReply.title.trim().length <= 20, 'title of quickReply has a 20 character limit, after that it gets truncated'); // payload has a 1000 character limit
        (0, _invariant2.default)(quickReply.payload.length <= 1000, 'payload of quickReply has a 1000 character limit');}});return this.send(recipientId, _extends({}, textOrAttachment, { quick_replies: quickReplies }));};this.sendSenderAction = (recipientId, action) => this._http.post(`/me/messages?access_token=${this._accessToken}`, { recipient: { id: recipientId }, sender_action: action });this.turnTypingIndicatorsOn = recipientId => this.sendSenderAction(recipientId, 'typing_on');this.turnTypingIndicatorsOff = recipientId => this.sendSenderAction(recipientId, 'typing_off');this.uploadAttachment = (type, url) => this._http.post(`/me/message_attachments?access_token=${this._accessToken}`, {
    message: {
      attachment: {
        type,
        payload: {
          url,
          is_reusable: true } } } });this.






  uploadAudio = url => this.uploadAttachment('audio', url);this.
  uploadImage = url => this.uploadAttachment('image', url);this.
  uploadVideo = url => this.uploadAttachment('video', url);this.
  uploadFile = url => this.uploadAttachment('file', url);};